#!/usr/bin/env node

// Dependencies
var GhCal = require("../lib")
  , GhConfig = {}
  , Abs = require("abs")
  , CliGhCal = require("cli-gh-cal")
  , Logger = require("bug-killer")
  , Clp = require("clp")
  , Package = require("../package")
  , ReadJson = require("r-json")
  , Moment = require("moment")
  ;

// Try to get the GitHub config username
Moment.suppressDeprecationWarnings = true;
try {
    GhConfig = ReadJson(Abs("~/.github-config.json"));
} catch (e) {}

// Parse the command line arguments
var usernameOpt = new Clp.Option(["u", "username"], "The GitHub username. If you're using CLI GitHub, by default it will be your username.", "username", GhConfig.username)
  , cookieOpt = new Clp.Option(["c", "cookie"], "Your GitHub cookie. Useful to get private stats.", "cookie")
  , sinceDateOpt = new Clp.Option(["s", "since"], "Optional start date.", "date")
  , untilDateOpt = new Clp.Option(["e", "until"], "Optional end date.", "date")
  , noAnsiOpt = new Clp.Option(["n", "no-ansi"], "Forces the tool not to use ANSI styles.")
  , lightOpt = new Clp.Option(["l", "light"], "Enables the light theme.")
  , parser = new Clp({
        name: "GitHub Calendar"
      , version: Package.version
      , exe: Package.name
      , examples: [
            "ghcal -u ionicabizau"
          , "ghcal -u ionicabizau --light"
          , "ghcal -u ionicabizau --no-ansi"
          , "ghcal -u ionicabizau -s '1 January 2015' # All the commits from 1 January 2015 to now"
          , "ghcal -u ionicabizau -s '1 January 2015' -u '1 March 2015' # Select a time range"
        ]
      , docs_url: Package.homepage
      , notes: "Note that only the last year statistics are available."
      , process: true
    }, [
        usernameOpt
      , cookieOpt
      , sinceDateOpt
      , untilDateOpt
      , noAnsiOpt
      , lightOpt
    ])
  ;

// Stringify the stats
GhCal({
    username: usernameOpt.value
  , cookie: cookieOpt.value
}, function (err, data) {
    if (err) { return Logger.log(err, "error"); }
    console.log(CliGhCal(data, {
        theme: lightOpt.is_provided ? "LIGHT" : noAnsiOpt.is_provided ? null : "DARK"
      , start: sinceDateOpt.value  ? Moment(sinceDateOpt.value) : null
      , end: untilDateOpt.value ? Moment(untilDateOpt.value) : null
    }));
});
